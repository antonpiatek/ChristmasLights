bool twinkle_buffer[16];	//2 byte array for boolean twinkle values.
#define TWINKLE_ON	0x00FFFFFF
#define TWINKLE_OFF	0x00000000
unsigned char twinkle_i;
unsigned char twinkle_div;
unsigned char twinkle_j;
/* Generated by noise_table.pl 32 16 */
static const unsigned char twinkle_noise[] = {
    2, 14,  2,  2, 12, 14, 11,  5,  7,  2,  8, 14, 13,  9,  0, 15,  7,  7, 12,  6,
    0,  9,  2,  9,  3,  5, 12, 15,  5, 11,  1,  7};

//functions for this pattern

//init function
void twinkle_init(void) {
  unsigned char i;
  for (i = 0 ; i < sizeof(twinkle_buffer) ; i++) {
    twinkle_buffer[i] = 0;
  }
  twinkle_i = 0;
  twinkle_j = 0;
  twinkle_div = 0;

  return;
}

//frame function
void twinkle_frame(void) {
  //only run twice a second
  if (twinkle_div++ < 12) {
    return;
  }
  twinkle_div = 0;

  //invert the current bit
  twinkle_buffer[twinkle_i] = twinkle_buffer[twinkle_i] ^ 1;
  
  //select the next bit slightly randomly
  twinkle_i = (twinkle_i + twinkle_noise[twinkle_j++]) % sizeof(twinkle_buffer);
  if (twinkle_j >= sizeof(twinkle_noise)) {
    twinkle_j = 0;
  }

  return;
}

//getled function
unsigned long twinkle_getled(unsigned char led) {
  if (twinkle_buffer[led % sizeof(twinkle_buffer)]) {
    return(TWINKLE_ON);
  } else {
    return(TWINKLE_OFF);
  }
}
